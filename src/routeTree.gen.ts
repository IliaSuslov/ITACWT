/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as PriceplansIndexImport } from './routes/price_plans/index'
import { Route as PagesIndexImport } from './routes/pages/index'

// Create Virtual Routes

const ContactsLazyImport = createFileRoute('/contacts')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ContactsLazyRoute = ContactsLazyImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contacts.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const PriceplansIndexRoute = PriceplansIndexImport.update({
  id: '/price_plans/',
  path: '/price_plans/',
  getParentRoute: () => rootRoute,
} as any)

const PagesIndexRoute = PagesIndexImport.update({
  id: '/pages/',
  path: '/pages/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/contacts': {
      id: '/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ContactsLazyImport
      parentRoute: typeof rootRoute
    }
    '/pages/': {
      id: '/pages/'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof PagesIndexImport
      parentRoute: typeof rootRoute
    }
    '/price_plans/': {
      id: '/price_plans/'
      path: '/price_plans'
      fullPath: '/price_plans'
      preLoaderRoute: typeof PriceplansIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/pages': typeof PagesIndexRoute
  '/price_plans': typeof PriceplansIndexRoute
  '/products': typeof ProductsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/pages': typeof PagesIndexRoute
  '/price_plans': typeof PriceplansIndexRoute
  '/products': typeof ProductsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/pages/': typeof PagesIndexRoute
  '/price_plans/': typeof PriceplansIndexRoute
  '/products/': typeof ProductsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/contacts' | '/pages' | '/price_plans' | '/products'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contacts' | '/pages' | '/price_plans' | '/products'
  id:
    | '__root__'
    | '/'
    | '/contacts'
    | '/pages/'
    | '/price_plans/'
    | '/products/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ContactsLazyRoute: typeof ContactsLazyRoute
  PagesIndexRoute: typeof PagesIndexRoute
  PriceplansIndexRoute: typeof PriceplansIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ContactsLazyRoute: ContactsLazyRoute,
  PagesIndexRoute: PagesIndexRoute,
  PriceplansIndexRoute: PriceplansIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/contacts",
        "/pages/",
        "/price_plans/",
        "/products/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/contacts": {
      "filePath": "contacts.lazy.tsx"
    },
    "/pages/": {
      "filePath": "pages/index.tsx"
    },
    "/price_plans/": {
      "filePath": "price_plans/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
